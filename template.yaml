AWSTemplateFormatVersion: 2010-09-09
Description: >-
  visitor-management
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is an API gateway associated with the getByIdFunction and putItemFunctions
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS, POST, GET'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'" #DO NOT USE THIS VALUE IN PRODUCTION - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html

  # This is a Lambda function config associated with the source code: get-by-id.js
  getVisitorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-visitors.getVisitorsHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VisitorsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          VISITORS_TABLE: !Ref VisitorsTable
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visitors
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
            RequestParameters:
              - method.request.querystring.residentId:
                  Required: false

  # This is a Lambda function config associated with the source code: get-visit-requests
  getVisitRequestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-visit-requests.getVisitRequestsHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VisitorsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitRequestsTable
      Environment:
        Variables:
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
          # Make table name accessible as environment variable from function code during execution
          VISIT_REQUESTS_TABLE: !Ref VisitRequestsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visit-requests
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
            RequestParameters:
              - method.request.querystring.residentId:
                  Required: false

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getVisitorByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-visitor-by-id.getVisitorByIdHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VisitorsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          VISITORS_TABLE: !Ref VisitorsTable
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visitor/{id}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  # This is a Lambda function config associated with the source code: get-invite-by-token.mjs
  getInviteByTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-invite-by-token.getInviteByTokenHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VisitorsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref InviteLinksTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          INVITE_LINKS_TABLE: !Ref InviteLinksTable
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /invite/{inviteToken}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  # This is a Lambda function config associated with the source code: get-visit-request-by-token.mjs
  getVisitRequestByTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-visit-request-by-token.getVisitRequestByTokenHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VisitorsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitRequestsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          VISIT_REQUESTS_TABLE: !Ref VisitRequestsTable
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visit-request/{inviteToken}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putVisitorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/put-visitor.putVisitorHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VisitorsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorsTable
      Environment:
        Variables:
          VISITORS_TABLE: !Ref VisitorsTable
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
          APP_FRONTEND_BASE_URL: 'https://vms.alphinecodetech.click'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visitor
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  putInviteLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/put-invite-link.putInviteLinkItemHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the InviteLinksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref InviteLinksTable
      Environment:
        Variables:
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
          APP_FRONTEND_BASE_URL: 'https://vms.alphinecodetech.click'
          INVITE_LINKS_TABLE: !Ref InviteLinksTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /invite
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  putVisitRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/put-visit-request.putVisitRequestHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VisitRequestsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitRequestsTable
      Environment:
        Variables:
          # Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
          VISIT_REQUESTS_TABLE: !Ref VisitRequestsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visit-request
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  VisitorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VisitorsTable
      AttributeDefinitions:
        - AttributeName: registrationId
          AttributeType: S
      KeySchema:
        - AttributeName: registrationId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  InviteLinksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: InviteLinksTable
      AttributeDefinitions:
        - AttributeName: inviteToken
          AttributeType: S
      KeySchema:
        - AttributeName: inviteToken
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  VisitRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VisitRequestsTable
      AttributeDefinitions:
        - AttributeName: inviteToken
          AttributeType: S
      KeySchema:
        - AttributeName: inviteToken
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 Bucket to host single page app website
  WebSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, /*]]
            Condition:
              StringEquals:
                AWS:SourceArn:
                  !Join [
                    '',
                    [
                      'arn:aws:cloudfront::',
                      !Ref 'AWS::AccountId',
                      ':distribution/',
                      !Ref CloudFrontDistribution,
                    ],
                  ]
  # CloudFront Distribution for hosting the single page app website
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
            Id: myS3Origin
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
              - US
              - CA
              - GB
              - DE
              - PH
              - AU
        Aliases: # Use Aliases to specify alternate domain names
          - alphinecodetech.click
          - vms.alphinecodetech.click
        ViewerCertificate:
          AcmCertificateArn: 'arn:aws:acm:us-east-1:121216464768:certificate/dac2d551-7d39-47e5-bdb0-4554465cd6ee'
          MinimumProtocolVersion: 'TLSv1.2_2021'
          SslSupportMethod: 'sni-only'
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${WebSiteBucket} OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: alphinecodetech.click
      HostedZoneConfig:
        Comment: Hosted zone for my visitor management application
    # DeletionPolicy: Retain

  # Note that CNAMEs are not included here as they were only used for validation needed for public certificate request in ACM. It is a one time setup.
  # Alias record for the vms subdomain domain IPV4
  CloudFrontAliasRecordA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: vms.alphinecodetech.click
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # Global CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistribution.DomainName # Your CloudFront distribution's domain name
        EvaluateTargetHealth: false # Important for CloudFront

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: VisitorManagementUserPool
      # Configure password policies as needed
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      # Configure sign-in options (email, phone, username)
      UsernameAttributes:
        - email
      # Configure auto-verification for email/phone
      AutoVerifiedAttributes:
        - email
      # Define custom attributes if needed
      Schema:
        - Name: given_name
          AttributeDataType: String
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
      # Configure message customizations (email verification, password reset)
      # MessageConfigurations:
      #   EmailMessage: "..."
      #   EmailSubject: "..."
      # Configure MFA if desired
      # MfaConfiguration: OPTIONAL
      # SmsConfiguration:
      #   SmsSenderId: "..."
      #   SmsRegion: "..."
      # Configure user pool add-ons (advanced security features)
      # UserPoolAddOns:
      #   AdvancedSecurityMode: ENFORCED

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: WebAppClient
      UserPoolId: !Ref UserPool
      # Configure allowed OAuth flows and scopes for your application
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - 'https://vms.alphinecodetech.click/signin-callback' # Replace with your actual callback URL(s)
      LogoutURLs:
        - 'https://vms.alphinecodetech.click/signout-callback' # Replace with your actual logout URL(s)
      # Enable/disable refresh token generation
      GenerateSecret: false
      # Configure supported identity providers (e.g., Cognito, Google, Facebook)
      # SupportedIdentityProviders:
      #   - COGNITO

  # Alias record for the vms subdomain domain IPV6
  CloudFrontAliasRecordAAAA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: vms.alphinecodetech.click
      Type: AAAA
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # Global CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistribution.DomainName # Your CloudFront distribution's domain name
        EvaluateTargetHealth: false # Important for CloudFront

Outputs:
  APIGatewayEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value: !GetAtt CloudFrontDistribution.DomainName
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value: !Ref WebSiteBucket
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
