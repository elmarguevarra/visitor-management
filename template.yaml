AWSTemplateFormatVersion: 2010-09-09
Description: visitor-management
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  CognitoDomainPrefix:
    # Changed Parameter name for clarity and consistency
    Type: String
    Default: alphine-vms-auth
    Description: The Cognito User Pool domain prefix
  AcmCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:121216464768:certificate/dac2d551-7d39-47e5-bdb0-4554465cd6ee
    Description: The public certificate ARN in us-east-1 region

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: OPTIONS,POST,GET # Corrected YAML syntax for strings
        AllowHeaders: Content-Type
        AllowOrigin: '*' # DO NOT USE THIS VALUE IN PRODUCTION
      TracingEnabled: true # Added tracing for debugging

  getVisitorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-visitors.getVisitorsHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Gets all visitors from the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorsTable
      Environment:
        Variables:
          VISITORS_TABLE: !Ref VisitorsTable
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visitors
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            RequestParameters:
              - method.request.querystring.residentId:
                  Required: false
      Tracing: Active # Add tracing

  getVisitRequestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-visit-requests.getVisitRequestsHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Gets all visit requests from the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitRequestsTable
      Environment:
        Variables:
          ENDPOINT_OVERRIDE: ''
          VISIT_REQUESTS_TABLE: !Ref VisitRequestsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visit-requests
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            RequestParameters:
              - method.request.querystring.residentId:
                  Required: false
      Tracing: Active # Add tracing

  getVisitorByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-visitor-by-id.getVisitorByIdHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Gets a visitor by ID from the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorsTable
      Environment:
        Variables:
          VISITORS_TABLE: !Ref VisitorsTable
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visitor/{id}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
      Tracing: Active # Add tracing

  getInviteByTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-invite-by-token.getInviteByTokenHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Gets an invite link by token from the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InviteLinksTable
      Environment:
        Variables:
          INVITE_LINKS_TABLE: !Ref InviteLinksTable
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /invite/{inviteToken}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
      Tracing: Active # Add tracing

  getVisitRequestByTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/get-visit-request-by-token.getVisitRequestByTokenHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Gets a visit request by token from the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitRequestsTable
      Environment:
        Variables:
          VISIT_REQUESTS_TABLE: !Ref VisitRequestsTable
          ENDPOINT_OVERRIDE: ''
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visit-request/{inviteToken}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
      Tracing: Active # Add tracing

  putVisitorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/put-visitor.putVisitorHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Adds a new visitor to the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorsTable
      Environment:
        Variables:
          VISITORS_TABLE: !Ref VisitorsTable
          ENDPOINT_OVERRIDE: ''
          APP_FRONTEND_BASE_URL: https://vms.alphinecodetech.click
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visitor
            Method: POST
            RestApiId: !Ref ApiGatewayApi
      Tracing: Active # Add tracing

  putInviteLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/put-invite-link.putInviteLinkItemHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Adds a new invite link to the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InviteLinksTable
      Environment:
        Variables:
          ENDPOINT_OVERRIDE: ''
          APP_FRONTEND_BASE_URL: https://vms.alphinecodetech.click
          INVITE_LINKS_TABLE: !Ref InviteLinksTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /invite
            Method: POST
            RestApiId: !Ref ApiGatewayApi
      Tracing: Active # Add tracing

  putVisitRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src/handlers/put-visit-request.putVisitRequestHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Adds a new visit request to the DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitRequestsTable
      Environment:
        Variables:
          ENDPOINT_OVERRIDE: ''
          VISIT_REQUESTS_TABLE: !Ref VisitRequestsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /visit-request
            Method: POST
            RestApiId: !Ref ApiGatewayApi
      Tracing: Active # Add tracing

  VisitorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VisitorsTable
      AttributeDefinitions:
        - AttributeName: registrationId
          AttributeType: S
      KeySchema:
        - AttributeName: registrationId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        # Added DynamoDB Stream
        StreamEnabled: true

  InviteLinksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: InviteLinksTable
      AttributeDefinitions:
        - AttributeName: inviteToken
          AttributeType: S
      KeySchema:
        - AttributeName: inviteToken
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        # Added DynamoDB Stream
        StreamEnabled: true

  VisitRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VisitRequestsTable
      AttributeDefinitions:
        - AttributeName: inviteToken
          AttributeType: S
      KeySchema:
        - AttributeName: inviteToken
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        # Added DynamoDB Stream
        StreamEnabled: true

  WebSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
    #Removed PublicAccessBlockConfiguration: #removing this as it may cause issues.
    AccessControl: Private # Added AccessControl for security best practice
  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref WebSiteBucket
                - /*
            Condition:
              StringEquals:
                AWS:SourceArn: !Join
                  - ''
                  - - 'arn:aws:cloudfront::'
                    - !Ref AWS::AccountId
                    - ':distribution/'
                    - !Ref CloudFrontDistribution
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${WebSiteBucket}OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
            Id: myS3Origin
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id #changed from OriginAccessIdentity to OriginAccessControlId
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
              - US
              - CA
              - GB
              - DE
              - PH
              - AU
        Aliases:
          - alphinecodetech.click
          - vms.alphinecodetech.click
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: alphinecodetech.click
      HostedZoneConfig:
        Comment: Hosted zone for my visitor management application
    DeletionPolicy: Retain

  # Note that CNAMEs are not included here as they were only used for validation needed for public certificate request in ACM. It is a one time setup.
  # Alias record for the vms subdomain domain IPV4
  CloudFrontAliasRecordA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: vms.alphinecodetech.click
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false

  CloudFrontAliasRecordAAAA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: vms.alphinecodetech.click
      Type: AAAA
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: VisitorManagementUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: phone_number
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: email
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: false
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: VisitorManagementClient
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - https://vms.alphinecodetech.click/signin-callback
      LogoutURLs:
        - https://vms.alphinecodetech.click/signout-callback
      GenerateSecret: false

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomainPrefix #changed from Domain to CognitoDomainPrefix
      UserPoolId: !Ref UserPool
      # Removed CustomDomainConfig

Outputs:
  APIGatewayEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value: !GetAtt CloudFrontDistribution.DomainName
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value: !Ref WebSiteBucket
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  UserPoolDomainUrl:
    Description: Cognito User Pool Domain URL
    Value: !Sub https://${CognitoDomainPrefix}.auth.${AWS::Region}.amazoncognito.com #changed from DomainPrefix to CognitoDomainPrefix
  AuthorityUrl:
    Description: Cognito User Pool Authority URL (for OIDC client)
    Value: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON