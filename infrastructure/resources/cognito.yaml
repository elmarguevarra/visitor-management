AWSTemplateFormatVersion: "2010-09-09"
Description: Nested stack for Cognito User Pool and User Groups

Parameters:
  AdminGroupName:
    Type: String
  ResidentGroupName:
    Type: String
  GuardGroupName:
    Type: String
  CognitoCustomDomainName:
    Type: String
  AcmCertificateArn:
    Type: String
  HostedZoneId:
    Type: String
  BaseDomain:
    Type: String
  SubDomain:
    Type: String

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: VisitorManagementCognitoUserPool
      Schema:
        - Name: "given_name"
          Required: true
          Mutable: true
        - Name: "family_name"
          Required: true
          Mutable: true
        - Name: "email"
          Required: true
          Mutable: true
        - Name: "phone_number"
          Required: false
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      # DeletionProtection: ACTIVE

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: VisitorManagementCognitoClient
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - !Sub "https://${SubDomain}/signin-callback"
      LogoutURLs:
        - !Sub "https://${SubDomain}/signout-callback"
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      AccessTokenValidity: 60 # in minutes
      IdTokenValidity: 60 # in minutes
      RefreshTokenValidity: 30 # in days
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days

  CognitoCustomDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoCustomDomainName
      UserPoolId: !Ref CognitoUserPool
      CustomDomainConfig:
        CertificateArn: !Ref AcmCertificateArn

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: !Ref AdminGroupName
      UserPoolId: !Ref CognitoUserPool
      Description: Admin users
      Precedence: 0

  ResidentUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: !Ref ResidentGroupName
      UserPoolId: !Ref CognitoUserPool
      Description: Resident users
      Precedence: 1

  GuardUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: !Ref GuardGroupName
      UserPoolId: !Ref CognitoUserPool
      Description: Guard users
      Precedence: 2

Outputs:
  CognitoUserPool:
    Value: !Ref CognitoUserPool
  CognitoUserPoolClient:
    Value: !Ref CognitoUserPoolClient
  CognitoCustomDomainCloudFrontDistribution:
    Value: !GetAtt CognitoCustomDomain.CloudFrontDistribution
    Export:
      Name: CognitoCustomDomainCloudFrontDistribution
