AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Nested stack for Api Gateway and Lambda Functions

Parameters:
  SubDomain:
    Type: String
    Description: The subdomain for the web frontend (e.g., vms.alphinecodetech.click)
  SysNotifEmailAddress:
    Type: String
    Description: Email address for SES notifications
  AdminEmailAddress:
    Type: String
    Description: Email address for admin notifications

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type,Authorization,X-Required-Permission'"
        AllowOrigin: !Sub "'https://${SubDomain}'"
        AllowCredentials: true
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !ImportValue CognitoUserPoolArn
          LambdaAuthorizer:
            FunctionArn: !GetAtt lambdaAuthorizerFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Authorization
                - X-Required-Permission
              ReauthorizeEvery: 3600

  lambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/auth/authorizer.verifiedPermissionsAuthorizerHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 512
      Timeout: 15
      Description: Lambda authorizer using Amazon Verified Permissions
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - verifiedpermissions:IsAuthorized
              Resource: "*"
      Environment:
        Variables:
          POLICY_STORE_ID: !ImportValue VisitorManagementPolicyStore
          COGNITO_USER_POOL_ID: !ImportValue CognitoUserPool
          COGNITO_CLIENT_ID: !ImportValue CognitoUserPoolClient

  getVisitorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/get-visitors.getVisitorsHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP get method to get all items by id
        from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue VisitorsTable
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          VISITORS_TABLE: !ImportValue VisitorsTable
          DB_ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/visitors
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            RequestParameters:
              - method.request.querystring.residentId:
                  Required: false
            Auth:
              Authorizer: LambdaAuthorizer

  getPermissionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/get-permissions.getPermissionsHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: Get permissions from amazon verified permissions
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - verifiedpermissions:IsAuthorized
              Resource: "*"
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          POLICY_STORE_ID: !ImportValue VisitorManagementPolicyStore
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/permissions
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            RequestParameters:
              - method.request.querystring.residentId:
                  Required: false

  getVisitRequestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/get-visit-requests.getVisitRequestsHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP get method to get all items by id
        from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue VisitRequestsTable
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          DB_ENDPOINT_OVERRIDE: ""
          VISIT_REQUESTS_TABLE: !ImportValue VisitRequestsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/visit-requests
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            RequestParameters:
              - method.request.querystring.residentId:
                  Required: false
            Auth:
              Authorizer: LambdaAuthorizer

  getVisitorByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/get-visitor-by-id.getVisitorByIdHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP get method to get one item by id
        from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue VisitorsTable
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          VISITORS_TABLE: !ImportValue VisitorsTable
          DB_ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/visitor/{id}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE

  getInviteByTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/get-invite-by-token.getInviteByTokenHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP get method to get one item by id
        from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue InviteLinksTable
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          INVITE_LINKS_TABLE: !ImportValue InviteLinksTable
          DB_ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/invite/{inviteToken}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE

  getVisitRequestByTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/get-visit-request-by-token.getVisitRequestByTokenHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP get method to get one item by id
        from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue VisitRequestsTable
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          VISIT_REQUESTS_TABLE: !ImportValue VisitRequestsTable
          DB_ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/visit-request/{inviteToken}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE

  putVisitorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/put-visitor.putVisitorHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP post method to add one item to a
        DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue VisitorsTable
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          VISITORS_TABLE: !ImportValue VisitorsTable
          DB_ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/visitor
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: LambdaAuthorizer

  putInviteLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/put-invite-link.putInviteLinkItemHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP post method to add one item to a
        DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue InviteLinksTable
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          DB_ENDPOINT_OVERRIDE: ""
          INVITE_LINKS_TABLE: !ImportValue InviteLinksTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/invite
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE

  putVisitRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/put-visit-request.putVisitRequestHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP post method to add one item to a
        DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue VisitRequestsTable
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          DB_ENDPOINT_OVERRIDE: ""
          VISIT_REQUESTS_TABLE: !ImportValue VisitRequestsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/visit-request
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE

  sendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/notif/send-email.sendEmailHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP post method to send an email using
        AWS SES.
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
                - ses:SendTemplatedEmail
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject # Optional: if you need to verify existence
              # Resource: !Sub arn:aws:s3:::visit-qr-codes/qrcodes/*
              Resource: "*"
      Environment:
        Variables:
          APP_FRONTEND_BASE_URL: !Sub "https://${SubDomain}"
          SYS_NOTIF_EMAIL_ADDRESS: !Ref SysNotifEmailAddress
          ADMINISTRATOR_EMAIL_ADDRESS: !Ref AdminEmailAddress
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/send-email
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE
  getParameterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../backend/
      Handler: src/handlers/ssm/get-parameter.getParameterhandler
      Runtime: nodejs20.x
      Architectures:
        - arm64 # Cheaper and often better performance for Lambda
      MemorySize: 512 # Better baseline for Node.js
      Timeout: 15 # More reasonable default
      Description: HTTP post method to send an email using
        AWS SES.
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: "*"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/ssm-parameter
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: NONE

Outputs:
  ApiGatewayApi:
    Value: !Ref ApiGatewayApi
